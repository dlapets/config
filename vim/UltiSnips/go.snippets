snippet ass
package `!v expand('%:p:h:t')`_test

import (
	"testing"
)

func Test$1(t *testing.T) {
	$0
}
endsnippet

snippet pack
package `!v expand('%:p:h:t')`

$0
endsnippet

snippet packt
package `!v expand('%:p:h:t')`_test

$0
endsnippet

snippet te
func Test$1(t *testing.T) {
	$0
	require.Equal(t, true, false)
	assert.Equal(t, true, false)
}

endsnippet

snippet tr
t.Run(name, func(t *testing.T) {
	$0
})
endsnippet

snippet table
for name, tc := range cases {
	t.Run(name, func(t *testing.T) {
		$0
	})
}
endsnippet

snippet atable
for _, tt := range cases {
	t.Run(tt.name, func(t *testing.T) {
		$0
	})
}
endsnippet

snippet ae
assert.Error(t, err)
$0
endsnippet

snippet ane
assert.NoError(t, err)
$0
endsnippet

snippet re
require.Error(t, err)
$0
endsnippet

snippet rne
require.NoError(t, err)
$0
endsnippet

snippet a
assert.Equal(t, $1, $2)
$0
endsnippet

snippet ie
if err != nil {
	return nil, err
}
$0
endsnippet

snippet div
// -----------------------------------------------------------------------------
// $1
// -----------------------------------------------------------------------------
$0
endsnippet

snippet hr
// -----------------------------------------------------------------------------
$0
endsnippet

snippet linit
func init() {
	log.SetOutput(logger.NewFileWriter("./test.log"))
}
endsnippet

snippet wtf
fmt.Printf("WTF MATE !!!! %s\n", $1) // TODO remove
endsnippet
#global !p
#
#endglobal
